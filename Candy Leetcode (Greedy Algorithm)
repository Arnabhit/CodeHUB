class Solution {
public:
    int candy(vector<int>& ratings) {
        
        // give the candy on the basis of peak & valley 
        
        // draw proper diagram , give one candy to all intially 
        
        // there will be only 1 peak (multiple equal valued peaks
        // consecutivey  ) betweeen 2 minimas , ()
        
        // so give the incresing part in the incresingly fashion 
        
        // by checking with its previous ones  (valley1 -> PEAK , increasing)
        
        // give the (PEAK-> valley2 , decresing fashion ) 
        
        // now we will allot the value acccordingly to all values between 2 valley 
        
        // but peak value will be given as max(from valley1->PEAK , from PEAK->valley2)
        
        //Let take the Rating as : [1,3,6,8,9,5,3,6,8,5,4,2,2,3,7,7,9,8,6,6,6,4,2]
        
        // Diagram Credit -> TITAN (https://leetcode.com/TlTAN/) 
        
//            (5)         (4)                         (3)
//             9           8                           9
//            /|\         /|\                         /|\
//           / | \       / | \                (3)    / | \
//       (4)8  |  5(2)  6  |  5(3)             7 __ 7  |  8(2)
//         /   |   \   (2) |   \              /|   (1) |   \
//        /    |    \ /    |    \            / |    |  |    \         (3)
//    (3)6     |     3     |     4(2)       3(2)    |  |     6 __ 6 __ 6    -> Total candy = 50
//      /      |    (1)    |      \        /   | Reset |    (1)  (1)   |\
//     /       |           |       \      /    |  to 1 |          |    | \
// (2)3        |           |        2 __ 2     |       |          |    |  4(2)
//   /         |           |       (1)  (1)    |       |        Reset  |   \
//  /          |           |                   |       |         to 1  |    \
// 1(1)        |           |                   |       |               |     2(1)
//    Peak= max(5,3)  Peak= max(3,4)    Peak= max(3,0) |         Peak= max(0,3)
//                                                Peak= max(2,3)   
        
        
        int n=ratings.size();
        
        int candy=n;
        
        int i=1;
        
        while(i<n)
        {
            if(ratings[i]==ratings[i-1])
            {
                // already one candy is given to it 
                i++;
                continue;
            }
            
            // if there is any peak forming 
            
            int peak=0;
            
            while(i<n && ratings[i]>ratings[i-1])
            {
                peak++;
                
                candy+=peak; // give this peak amount of candy to current idx 
                // but actual peak's candy will be max from (valley1 -> PEAK increasing)
                // (PEAK-> valley2 , decresing fashion )
                
                i++;
                
            }
            
            // here this final peak(where iteration ends) value is that one which we assigned to actual PEAK
            
            int valley=0;
            
            while(i<n && ratings[i]<ratings[i-1])
            {
                valley++;
                
                candy+=valley;
                
                i++;
                
            }
            
            // Final value is that value , which we have assigned to peak value 
            
            // here we giving value in oppossite order 
            
            // lower value will be given to those which are closer to valley 
            
            // last valley will be assigned to actual PEAK 
            
            // we have assigned PEAK -> 2 values (peak , valley)
            
            // so substract minimum ones
            
            candy-=min(peak , valley);
        }
        
        return candy;
        
        
    }
};
