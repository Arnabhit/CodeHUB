int findPivot(vector<int>& nums){
    int s=0,e=nums.size()-1;
    while(s<e){
        int mid=s+(e-s)/2;
        if(nums[mid]>=nums[0]){
            s=mid+1;
        }
        else{
            e=mid;
        }
    }
    return s;
    
}
int Binarysearch(vector<int>& nums,int s,int e, int target) {
     
    while(s<=e){
        int mid=s+(e-s)/2;
        if(target==nums[mid]){
            return mid;
        }
        else if(target>nums[mid]){
            s=mid+1;
        }
        else{
            e=mid-1;
        }
    }
    return -1;
    }
class Solution {
public:
    int search(vector<int>& nums, int target) {
    int pivot=findPivot(nums);
    if(target>=nums[pivot] && target<=nums[nums.size()-1]){
        return Binarysearch(nums,pivot,nums.size()-1,target);
    }
        else{
            return Binarysearch(nums,0,pivot-1,target);
        }
    }
};
